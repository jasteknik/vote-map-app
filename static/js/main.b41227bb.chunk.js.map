{"version":3,"sources":["Components/InputForm.js","Components/displayMaps.js","Services/GetData.js","App.js","reportWebVitals.js","index.js"],"names":["inputForm","props","mapName","map","i","id","onClick","event","handleVote","displayMaps","maps","length","object","name","count","newVote","Axios","post","updateObj","App","useState","setMaps","update","GetData","order","then","response","data","console","log","useEffect","interval","setInterval","clearInterval","aMaps","aOrder","preventDefault","handleUpdate","handleClearMaps","InputForm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAaeA,EAXG,SAACC,GAGjB,OACE,mCACCA,EAAMC,QAAQC,KAAK,SAACA,EAAKC,GAAN,OAAc,8BAAyB,yBAAQC,GAAID,EAAGE,QAAS,SAACC,GAAD,OAAWN,EAAMO,WAAWD,EAAOJ,IAA3D,sBAA2EA,MAA1FC,EAAI,IAAMD,SCW3CM,EAhBK,SAACR,GAEnB,OAAIA,EAAMS,KAAKC,OAAS,EAKpB,6BACGV,EAAMS,KAAKP,KAAK,SAACS,EAAQR,GAAT,OAAgB,+BAAaA,EAAE,EAAf,KAAoBQ,EAAOC,KAA3B,KAAmCD,EAAOE,QAAjCV,QAKpC,gD,gBCQC,EAZI,SAACW,GAClB,OAAOC,IAAMC,KAVC,4CAUaF,IAWd,EARA,SAACG,GACd,OAAOF,IAAMC,KAbA,gDAaaC,IAOb,EAJD,WACZ,OAAOF,IAAMC,KAhBE,kDAgBa,K,MC+FfE,MAzGf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAELV,EAFK,KAECW,EAFD,KAkEb,SAASC,IAMPC,EALa,CACXb,KAAM,EACNc,MAAO,IAKNC,MAAK,SAAAC,GACJL,EAAQK,EAASC,MACjBC,QAAQC,IAAI,yBACZD,QAAQC,IAAIH,EAASC,SAO3B,OAvEAG,qBAAU,WACR,IAAMC,EAAWC,YAAaV,EAAQ,KACtC,OAAO,kBAAMW,cAAcF,MAC1B,IAqED,gCACE,sCACA,8BACE,wBAAQzB,QAAS,SAACC,GAAD,OApDF,SAACA,EAAO2B,EAAOC,GAClC5B,EAAM6B,iBACNR,QAAQC,IAAI,gBAMZN,EALa,CACXb,KAAMwB,EACNV,MAAOW,IAKNV,MAAK,SAAAC,GACJL,EAAQK,EAASC,MACjBC,QAAQC,IAAI,yBACZD,QAAQC,IAAIH,EAASC,SAuCOU,CAAa9B,EAAO,EAAG,IAAnD,sBAGF,8BACE,wBAAQD,QAAS,SAACC,GAAD,OAtCC,SAACA,GACvBA,EAAM6B,iBACNR,QAAQC,IAAI,kBACZN,IAEGE,KACCH,KAgC4BgB,CAAgB/B,IAA5C,qBAEF,cAACgC,EAAD,CACErC,QA3Fc,CAClB,WACA,aACA,UACA,YACA,cAuFIM,WA5EmB,SAACD,EAAOF,GAC/BE,EAAM6B,iBACNR,QAAQC,IAAI,SAAWxB,GAMvBkB,EALa,CACXV,KAAMR,EACNS,MAAO,IAKNW,KACCH,QAoEF,cAAC,EAAD,CAAaZ,KAAMA,QCjGV8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b41227bb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst inputForm = (props) => {\r\n\r\n\r\n  return(\r\n    <>\r\n    {props.mapName.map( (map, i ) =>  <div key={i + \"_\" + map}><button id={i} onClick={(event) => props.handleVote(event, map)}>Vote for {map}</button></div>)}\r\n    \r\n    </>\r\n  )\r\n} \r\n\r\nexport default inputForm;","import React from 'react';\r\n\r\nconst displayMaps = (props) => {\r\n  \r\n  if (props.maps.length > 0) {\r\n\r\n    //Go through new props.arr and map it in <li> format\r\n    return(\r\n\r\n      <ul>\r\n        {props.maps.map( (object, i) =>  <li key={i}>{i+1}: {object.name}: {object.count}</li>)}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  else return <p>No voting data</p>\r\n}\r\n\r\nexport default displayMaps;","import Axios from 'axios'\r\n\r\nconst voteApi = 'https://vote-map-server.herokuapp.com/api'\r\nconst getApi = 'https://vote-map-server.herokuapp.com/getmaps'\r\nconst clearApi = 'https://vote-map-server.herokuapp.com/clearmaps'\r\n\r\nconst httpUrl = 'https://'\r\nconst USERNAME = 'jasteknik'\r\nconst PASSWORD = 'RDX680mko123'\r\nconst url1 ='@opensky-network.org/api/flights/'\r\n\r\nconst newMapVote = (newVote) => {\r\n  return Axios.post(voteApi, newVote)\r\n}\r\n\r\nconst update = (updateObj) => {\r\n  return Axios.post(getApi, updateObj)\r\n}\r\n\r\nconst clear = () => {\r\n  return Axios.post(clearApi, [])\r\n}\r\n\r\nexport default { \r\n  newMapVote: newMapVote,\r\n  update: update,\r\n  clear: clear }\r\n","import React, {useState, useEffect, useRef} from 'react';\nimport InputButton from './Components/inputButton'\nimport InputForm from './Components/InputForm'\nimport DisplayMaps from './Components/displayMaps'\n\nimport GetData from './Services/GetData'\n\nimport './App.css';\n\n\nfunction App() {\n\n  const [ maps, setMaps ] = useState([])\n\n  const ACTIVE_MAPS = [\n    \"de_dust2\",\n    \"de_inferno\",\n    \"de_nuke\",\n    \"de_mirage\",\n    \"cs_assault\"\n  ]\n\n  //Update vote counts every five seconds\n  useEffect(() => {\n    const interval = setInterval( update, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n\n  //Handle for voting map\n  const handleNewMapVote = (event, id) => {\n    event.preventDefault()\n    console.log(\"hello \" + id)\n    const data = {\n      name: id,\n      count: 1\n    }\n\n    GetData\n      .newMapVote(data)\n      .then(\n        update()\n      )\n  }\n\n  //Handle for updating vote map count\n  const handleUpdate = (event, aMaps, aOrder) => {\n    event.preventDefault()\n    console.log(\"Update count\")\n    const data = {\n      maps: aMaps,\n      order: aOrder\n    }\n\n    GetData\n      .update(data)\n      .then(response => {\n        setMaps(response.data)\n        console.log('refresh data complete')\n        console.log(response.data)\n        }\n      )\n  }\n\n  const handleClearMaps = (event) => {\n    event.preventDefault()\n    console.log(\"CLEAR MAP DATA\")\n    GetData\n      .clear()\n      .then(\n        update()\n      )\n      \n  }\n\n  //Update function for map votes\n  function update() {\n    const data = {\n      maps: 1,\n      order: 0\n    }\n\n    GetData\n      .update(data)\n      .then(response => {\n        setMaps(response.data)\n        console.log('refresh data complete')\n        console.log(response.data)\n        }\n      )\n  }\n\n  \n\n  return (\n    <div>\n      <h1>Test</h1>\n      <div>\n        <button onClick={(event) => handleUpdate(event, 1, 0)}>UPDATE</button>\n      </div>\n      \n      <div>\n        <button onClick={(event) => handleClearMaps(event)}>CLEAR</button>\n      </div>\n      <InputForm \n        mapName={ACTIVE_MAPS}\n        handleVote={handleNewMapVote}\n      />\n\n      <DisplayMaps maps={maps} />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}