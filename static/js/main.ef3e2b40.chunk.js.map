{"version":3,"sources":["Components/InputForm.js","Components/displayMaps.js","Services/GetData.js","App.js","reportWebVitals.js","index.js"],"names":["inputForm","props","mapName","map","i","id","onClick","event","handleVote","displayMaps","maps","length","object","name","count","newVote","Axios","post","testServerUrl","updateObj","mapObject","App","useState","setMaps","useEffect","interval","setInterval","update","clearInterval","handleChangeMap","aMapName","preventDefault","GetData","exec","order","then","response","data","console","log","aMaps","aOrder","handleUpdate","handleClearMaps","InputForm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAaeA,EAXG,SAACC,GAGjB,OACE,mCACCA,EAAMC,QAAQC,KAAK,SAACA,EAAKC,GAAN,OAAc,gCAA0BD,EAAI,wBAAQE,GAAID,EAAGE,QAAS,SAACC,GAAD,OAAWN,EAAMO,WAAWD,EAAOJ,IAA3D,oBAApBC,EAAI,IAAMD,SCW3CM,EAhBK,SAACR,GAEnB,OAAIA,EAAMS,KAAKC,OAAS,EAKpB,6BACGV,EAAMS,KAAKP,KAAK,SAACS,EAAQR,GAAT,OAAgB,+BAAaA,EAAE,EAAf,KAAoBQ,EAAOC,KAA3B,KAAmCD,EAAOE,QAAjCV,QAKpC,gD,gBCWC,EAhBI,SAACW,GAClB,OAAOC,IAAMC,KANCC,4BAMaH,IAed,EAZA,SAACI,GACd,OAAOH,IAAMC,KATAC,gCASaC,IAWb,EARD,WACZ,OAAOH,IAAMC,KAZEC,kCAYa,KAOf,EAJG,SAACE,GACjB,OAAOJ,IAAMC,KAfMC,kCAeaE,I,MCyHnBC,MAvIf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAELZ,EAFK,KAECa,EAFD,KAabC,qBAAU,WACR,IAAMC,EAAWC,YAAaC,EAAQ,KACtC,OAAO,kBAAMC,cAAcH,MAC1B,IAIH,IA8CMI,EAAkB,SAACtB,EAAOuB,IAC9BvB,EAAMwB,iBAEW,UAAbD,GAKFE,EAJa,CACX9B,QAAS4B,EACTG,KAAM,IAURD,EAJa,CACX9B,QAAS4B,EACTG,KAAM,KAQZ,SAASN,IAMPK,EALa,CACXtB,KAAM,EACNwB,MAAO,IAKNC,MAAK,SAAAC,GACJb,EAAQa,EAASC,MACjBC,QAAQC,IAAI,yBACZD,QAAQC,IAAIH,EAASC,SAS3B,OACE,gCACE,sCACA,8BACE,wBAAQ/B,QAAS,SAACC,GAAD,OA5EF,SAACA,EAAOiC,EAAOC,GAClClC,EAAMwB,iBACNO,QAAQC,IAAI,gBAMZP,EALa,CACXtB,KAAM8B,EACNN,MAAOO,IAKNN,MAAK,SAAAC,GACJb,EAAQa,EAASC,MACjBC,QAAQC,IAAI,yBACZD,QAAQC,IAAIH,EAASC,SA+DOK,CAAanC,EAAO,EAAG,IAAnD,sBAGF,8BACE,wBAAQD,QAAS,SAACC,GAAD,OA9DC,SAACA,GACvBA,EAAMwB,iBACNO,QAAQC,IAAI,kBACZP,IAEGG,KACCR,KAwD4BgB,CAAgBpC,IAA5C,qBAEF,cAACqC,EAAD,CACE1C,QAnHc,CAClB,WACA,aACA,UACA,YACA,cA+GIM,WApGmB,SAACD,EAAOF,GAC/BE,EAAMwB,iBACNO,QAAQC,IAAI,SAAWlC,GAMvB2B,EALa,CACXnB,KAAMR,EACNS,MAAO,IAKNqB,KACCR,QA4FF,cAAC,EAAD,CAAajB,KAAMA,IAEnB,8BACE,wBAAQJ,QAAS,SAACC,GAAD,OAAWsB,EAAgBtB,EAAO,YAAnD,sBAEF,8BACE,wBAAQD,QAAS,SAACC,GAAD,OAAWsB,EAAgBtB,EAAO,UAAnD,uCC9HOsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ef3e2b40.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst inputForm = (props) => {\r\n\r\n\r\n  return(\r\n    <>\r\n    {props.mapName.map( (map, i ) =>  <div key={i + \"_\" + map}>{map}<button id={i} onClick={(event) => props.handleVote(event, map)}>Vote</button></div>)}\r\n    \r\n    </>\r\n  )\r\n} \r\n\r\nexport default inputForm;","import React from 'react';\r\n\r\nconst displayMaps = (props) => {\r\n  \r\n  if (props.maps.length > 0) {\r\n\r\n    //Go through new props.arr and map it in <li> format\r\n    return(\r\n\r\n      <ul>\r\n        {props.maps.map( (object, i) =>  <li key={i}>{i+1}: {object.name}: {object.count}</li>)}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  else return <p>No voting data</p>\r\n}\r\n\r\nexport default displayMaps;","import Axios from 'axios'\r\n\r\nconst remoteServerUrl = 'https://vote-map-server.herokuapp.com'\r\nconst testServerUrl = 'http://localhost:4000'\r\n\r\nconst voteApi = testServerUrl + '/api'\r\nconst getApi = testServerUrl +'/getmaps'\r\nconst clearApi = testServerUrl + '/clearmaps'\r\nconst changeMapApi = testServerUrl + '/changemap'\r\n\r\nconst newMapVote = (newVote) => {\r\n  return Axios.post(voteApi, newVote)\r\n}\r\n\r\nconst update = (updateObj) => {\r\n  return Axios.post(getApi, updateObj)\r\n}\r\n\r\nconst clear = () => {\r\n  return Axios.post(clearApi, [])\r\n}\r\n\r\nconst changeMap = (mapObject) => {\r\n  return Axios.post(changeMapApi, mapObject)\r\n}\r\n\r\nexport default { \r\n  newMapVote: newMapVote,\r\n  update: update,\r\n  clear: clear,\r\n  changeMap: changeMap }\r\n","import React, {useState, useEffect, useRef} from 'react';\nimport InputForm from './Components/InputForm'\nimport DisplayMaps from './Components/displayMaps'\n\nimport GetData from './Services/GetData'\n\nimport './App.css';\n\n\nfunction App() {\n\n  const [ maps, setMaps ] = useState([])\n\n  const ACTIVE_MAPS = [\n    \"de_dust2\",\n    \"de_inferno\",\n    \"de_nuke\",\n    \"de_mirage\",\n    \"cs_assault\"\n  ]\n\n  //Update vote counts every five seconds\n  useEffect(() => {\n    const interval = setInterval( update, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n\n  //Handle for voting map\n  const handleNewMapVote = (event, id) => {\n    event.preventDefault()\n    console.log(\"hello \" + id)\n    const data = {\n      name: id,\n      count: 1\n    }\n\n    GetData\n      .newMapVote(data)\n      .then(\n        update()\n      )\n  }\n\n  //Handle for updating vote map count\n  const handleUpdate = (event, aMaps, aOrder) => {\n    event.preventDefault()\n    console.log(\"Update count\")\n    const data = {\n      maps: aMaps,\n      order: aOrder\n    }\n\n    GetData\n      .update(data)\n      .then(response => {\n        setMaps(response.data)\n        console.log('refresh data complete')\n        console.log(response.data)\n        }\n      )\n  }\n\n  const handleClearMaps = (event) => {\n    event.preventDefault()\n    console.log(\"CLEAR MAP DATA\")\n    GetData\n      .clear()\n      .then(\n        update()\n      )\n      \n  }\n\n  //Change map handle\n  const handleChangeMap = (event, aMapName) => {\n    event.preventDefault()\n    \n    if (aMapName === 'voted'){\n      const data = {\n        mapName: aMapName,\n        exec: 0\n      }\n      GetData\n      .changeMap(data)\n    }\n    else {\n      const data = {\n        mapName: aMapName,\n        exec: 1\n      }\n      GetData\n      .changeMap(data)\n    }\n  }\n\n  //Update function for map votes\n  function update() {\n    const data = {\n      maps: 1,\n      order: 0\n    }\n\n    GetData\n      .update(data)\n      .then(response => {\n        setMaps(response.data)\n        console.log('refresh data complete')\n        console.log(response.data)\n        }\n      )\n  }\n\n  \n\n  \n\n  return (\n    <div>\n      <h1>Test</h1>\n      <div>\n        <button onClick={(event) => handleUpdate(event, 1, 0)}>UPDATE</button>\n      </div>\n      \n      <div>\n        <button onClick={(event) => handleClearMaps(event)}>CLEAR</button>\n      </div>\n      <InputForm \n        mapName={ACTIVE_MAPS}\n        handleVote={handleNewMapVote}\n      />\n\n      <DisplayMaps maps={maps} />\n\n      <div>\n        <button onClick={(event) => handleChangeMap(event, \"de_nuke\")}>CHANGE</button>\n      </div>\n      <div>\n        <button onClick={(event) => handleChangeMap(event, \"voted\")}>CHANGE TO VOTED MAP</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}